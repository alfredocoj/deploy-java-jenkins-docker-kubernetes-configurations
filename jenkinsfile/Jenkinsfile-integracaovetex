pipeline {
   agent any

   environment {
      DOCKER_REPO = '192.168.6.144:5001/ithappens'
      IMAGE_NAME = 'ecommerce-integracaovetex'
      APP_NAME = 'integracaovetex'
      VERSION = sh(script: 'echo $((${BUILD_NUMBER}%3))', returnStdout: true).trim()
      WORKSPACE_DEPLOYMENT = "configs"
      TEMPLATES_DIR_ANSIBLE = "${WORKSPACE_DEPLOYMENT}/ansible/ecommerce"
   }
   stages {
      stage('Clone repository') {
         /* Let's make sure we have the repository cloned to our workspace */

         //checkout scm
         steps {
            git branch: '${BRANCH}',
                  //credentialsId: 'my_cred_id',
                  url: 'git@git.mateus:ecommerce/integracaovtex.git'

            sh "ls -lat"
         }
      }

      stage('Clone repository configs') {
         /* Let's make sure we have the repository cloned to our workspace */
         //checkout scm
         steps {
            sh "mkdir -p $DIR_CONFIGS_BASE"
            dir("$DIR_CONFIGS_BASE") {
               git branch: 'master',
                     //credentialsId: '105d78b2-3f22-467e-82ac-e52151f8a48f',
                     url: 'git@gitlab.mateus:infra/configs-templates-deployment.git'

               sh "ls -lat"
            }
         }

      }

      stage('Build manven') {
         /* This builds the actual image; synonymous to
          * docker build on the command line */
         steps {
            sh 'mvn clean package -DskipTests'

            //sh 'printenv'

            sh 'cat ${TEMPLATES_DIR_ANSIBLE}/DockerfileIntegracaoVetex > Dockerfile'

            sh 'docker build -t ${IMAGE_NAME} .'

            sh 'docker tag $(docker images -q ${IMAGE_NAME}:latest) $DOCKER_REPO/$IMAGE_NAME:${VERSION}'

            sh 'docker tag $(docker images -q ${IMAGE_NAME}:latest) $DOCKER_REPO/$IMAGE_NAME:latest'

         }
      }

      stage('Push image') {
         steps {
            /* Finally, we'll push the image with two tags:
         * First, the incremental build number from Jenkins
         * Second, the 'latest' tag.
         * Pushing multiple tags is cheap, as all the layers are reused. */
            sh 'docker push ${DOCKER_REPO}/${IMAGE_NAME}:${VERSION}'
            sh 'docker push ${DOCKER_REPO}/${IMAGE_NAME}:latest'
         }
      }

      stage('Deploy production') {
         environment {
            ANSIBLE_PLAYBOOK="ansible/ecommerce/${APP_NAME}.yml"
            GROOVYFILE = "configs/configs/${APP_NAME}.groovy"
         }
         steps {
            dir("configs") {
               load "${GROOVYFILE}"
               //sh 'printenv'
               sh 'cat $ANSIBLE_PLAYBOOK | envsubst > ansible.yml'
               sh 'ansible-playbook -i ansible/hosts ansible.yml'
            }
         }
      }

   }
}